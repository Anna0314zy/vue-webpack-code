{"remainingRequest":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/_vue-loader@15.9.1@vue-loader/lib/index.js??vue-loader-options!/Users/liangyuan/Desktop/vue-webpack-code/vue-ui-compontents/9.swiper-vue/components/Swiper.vue?vue&type=style&index=0&lang=stylus&","dependencies":[{"path":"/Users/liangyuan/Desktop/vue-webpack-code/vue-ui-compontents/9.swiper-vue/components/Swiper.vue","mtime":1573137162000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/_css-loader@3.5.3@css-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/_vue-loader@15.9.1@vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/_postcss-loader@3.0.0@postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/liangyuan/Desktop/vue-webpack-code/vue-ui-compontents/9.swiper-vue/node_modules/stylus-loader/index.js","mtime":1519606876000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/_vue-loader@15.9.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5zd2lwZXIgewogIG1hcmdpbjogMCBhdXRvOwogIGJvcmRlcjogMTBweCBzb2xpZCBwdXJwbGU7Cn0KCi52aWV3cG9ydCB7CiAgcG9zaXRpb246IHJlbGF0aXZlOwogIG92ZXJmbG93OiBoaWRkZW47CiAgaGVpZ2h0OiAxNTBweDsKfQoKLmRvdHMgewogIGRpc3BsYXk6IGZsZXg7CiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CgogIHNwYW4gewogICAgY3Vyc29yOiBwb2ludGVyOwogICAgd2lkdGg6IDMwcHg7CiAgICBoZWlnaHQ6IDMwcHg7CiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICBsaW5lLWhlaWdodDogMzBweDsKICAgIGJvcmRlci1yYWRpdXM6IDUwJTsKICAgIGJvcmRlcjogMXB4IHNvbGlkIHJlZDsKICAgIG1hcmdpbjogMCAxMHB4OwogIH0KfQoKLmFjdGl2ZSB7CiAgYmFja2dyb3VuZDogcmVkOwogIGNvbG9yOiAjZmZmOwp9Cg=="},{"version":3,"sources":["Swiper.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0JA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"Swiper.vue","sourceRoot":"components","sourcesContent":["<template>\n  <div\n    class=\"swiper\"\n    @mouseenter=\"mouseenter\"\n    @mouseleave=\"mouseleave\"\n    @touchstart=\"touchstart\"\n    @touchmove=\"touchmove\"\n    @touchend=\"touchend\"\n  >\n    <div class=\"viewport\">\n      <slot></slot>\n    </div>\n    <!-- 点 dots -->\n    <div class=\"dots\">\n      <span\n        v-for=\"(item,index) in len\"\n        :key=\"index\"\n        :class=\"{active: active === index}\"\n        @click=\"select(index)\"\n      >{{item}}</span>\n    </div>\n    <div class=\"btn-list\">\n      <button @click=\"select(active-1)\">左边</button>\n      <button @click=\"select(active+1)\">右边</button>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default { // compositionApi\n  props: {\n    autoplay: {\n      type: Boolean,\n      default: true\n    },\n    value: {\n      type: String,\n      default: \"\"\n    }\n  },\n  data() {\n    return { currentSelcted: \"\", len: 0 };\n  },\n  methods: {\n    touchstart(e) {\n      this.mouseenter(); // 停止滚动\n      this.startX = e.touches[0].clientX;\n    },\n    touchmove() {\n      console.log(\"移动\");\n    },\n    touchend(e) {\n       let endX =  e.changedTouches[0].clientX;\n       let distance = endX - this.startX;\n\n       // 更严格的判断\n       if(distance < 0){\n           this.select(this.active+1)\n       }else{\n           this.select(this.active- 1)\n       }\n       this.run(); // 当位置变化后 还需要继续开启定时器\n    },\n    select(newIndex) {\n      //可以控制切换功能\n      // 点击dots 时 会触发对应的更新事件\n\n      this.prevPosition = this.active; // 当选择时\n\n      if (newIndex === this.names.length) newIndex = 0; // 做左右点击\n      if (newIndex === -1) newIndex = this.names.length - 1;\n      this.$emit(\"input\", this.names[newIndex]); // 改变后发射即可\n    },\n    mouseenter() {\n      clearInterval(this.timer);\n      this.timer = null;\n    },\n    mouseleave() {\n      // 如果有timer  表示已经在跑了 就不管了\n      if (!this.timer) {\n        this.run();\n      }\n    },\n    showChild() {\n      // 切换显示组件\n      // 需要获取当前从谁开始 从哪个name属性开始\n      this.currentSelcted = this.value || this.$children[0].name;\n      // 1) 让对应的儿子显示 其他人隐藏\n      this.$children.forEach(vm => {\n        this.$nextTick(() => {\n          // 我们需要更改完毕 是正向的还是反向的 再去更新视图\n          vm.selected = this.currentSelcted; // 跟子组件说那个需要加载\n        });\n\n        // 要跟儿子说 你是正着走还是反着走\n        //                      1        2\n        let reverse = this.prevPosition > this.active ? true : false;\n        // 和 子节点说 是正的还是反的\n        vm.reverse = reverse;\n\n        // 考虑临街值的问题\n        if (this.timer) {\n          // 无缝的时候\n          if (this.prevPosition === 0 && this.active === this.len - 1) {\n            vm.reverse = true;\n          }\n          if (this.prevPosition === this.len - 1 && this.active === 0) {\n            vm.reverse = false;\n          }\n        }\n      });\n    },\n    run() {\n      if (this.autoplay) {\n        this.timer = setInterval(() => {\n          // 把索引往后调整 box1 box2 之后把调整的结果 发送给面\n          // 确定当前是第几个\n          let index = this.active;\n          let newIndex = index - 1;\n          this.select(newIndex);\n        }, 3000);\n      }\n    }\n  },\n  computed: {\n    active() {\n      // active 表示当前是第几个的索引\n      return this.names.indexOf(this.currentSelcted);\n    }\n  },\n  beforeDestroy() {\n    clearInterval(this.timer);\n  },\n  watch: {\n    value() {\n      this.showChild();\n    }\n  },\n  // render\n  mounted() {\n    // 1) 只执行一次\n    this.names = this.$children.map(child => child.name);\n    this.len = this.names.length; // 获取儿子节点的个数\n    this.showChild(); // 1) 显示默认的节点\n    // 2） 自动轮播\n    this.run();\n    // 3) 控制动画的方向\n    // 先记录当前的值\n    this.prevPosition = this.active; // 记录刚进来的值\n  }\n};\n</script>\n\n<style lang=\"stylus\">\n.swiper {\n  margin: 0 auto;\n  border: 10px solid purple;\n}\n\n.viewport {\n  position: relative;\n  overflow: hidden;\n  height: 150px;\n}\n\n.dots {\n  display: flex;\n  justify-content: center;\n\n  span {\n    cursor: pointer;\n    width: 30px;\n    height: 30px;\n    text-align: center;\n    line-height: 30px;\n    border-radius: 50%;\n    border: 1px solid red;\n    margin: 0 10px;\n  }\n}\n\n.active {\n  background: red;\n  color: #fff;\n}\n</style>"]}]}